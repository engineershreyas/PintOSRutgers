+--------------------+
			|       ECE 434      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Cedric Blake <cedricblake48@gmail.com>
FirstName LastName <netid@scarletmail.rutgers.edu>
FirstName LastName <netid@scarletmail.rutgers.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    int64_t ticksToWait;                /* The number of ticks past the current tick to sleep */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
  
    struct list_elem d_elem;            /* element referencing thread in donation list*/

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };


struct list waitingList = LIST_INITIALIZER(waitingList);



---- ALGORITHMS ----

the thread that calls timer_sleep will have a tick value stored which tells the thread when to wake up.
The thread is then pushed to the waiting queue in oreder based on the threads designated wake up time. 
Before the thread is blocked, interrupts are disabled so that the thread blocking instruction cannot be interrupted by an external handeler.
at the end of the function we re-enable the interrupts based on the original interrupt level before
the thread was called. As for the interrupt handler, external interrupts are once again disabled
so that threads can be unblocked without being interrupted. once that happens, we iterate through the list
to see if any threads are ready to wake up. If so, we wake up every thread that is designated to wake up at that 
particular time.


---- SYNCHRONIZATION ----

we avoid race conditions when we implement the variable required to store a threads wake up time as a member variable
of the thread struct. this allow each thread to individually track when they need to wake up rather than having
all threads access a global variable. In addition, implementing the global list variable as an ordered list based on 
the wake up tick count of each thread elimiates the ambiguity of the thread placement within the list. because of this
ordering, regardles of which thread accesses timer_sleep() first, the threads that need to wake up sooner will always
be pushed towards the front of the list and the threads that wake up later will be pushed towards the back.


---- RATIONALE ----

This design allows multiple sleeping threads to be accessed by the interrupt handler at every tick. this means that
if multiple threads need to wake up on the same tick, then they can simply by iterating over the list with a for
loop. I specifically chose to implement the data structure as an ordered list rather than
an unordered list because when threads need to wake up, in stead of having to chech every single 
thread in the list, we only need to check the threads whose wake up tick count is 
less than that of the current tick count. In addition, we can tell if we need to wake any threads up simply by looking at
the first element of the list. If the wake up tick count of that thread is greater than the current thread ticks, then we 
do not need to wake up any threads in this call of the interrupt handeler. Implementing an ordered list saves clock cycles to execute
more important code.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?


---- SYNCHRONIZATION ----

>> B5: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.

---- RATIONALE ----

>> B6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
>> Any other comments?